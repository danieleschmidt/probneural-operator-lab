name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install safety pip-audit
        
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report
      continue-on-error: true
      
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --desc
      continue-on-error: true
      
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-results
        path: |
          safety-report.json
          pip-audit-report.json
          
    - name: Create security summary
      if: always()
      run: |
        echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "## Dependency Vulnerability Scan" >> $GITHUB_STEP_SUMMARY
        echo "- Safety scan: $([ -f safety-report.json ] && echo "‚úÖ Completed" || echo "‚ùå Failed")" >> $GITHUB_STEP_SUMMARY
        echo "- pip-audit scan: $([ -f pip-audit-report.json ] && echo "‚úÖ Completed" || echo "‚ùå Failed")" >> $GITHUB_STEP_SUMMARY

  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] semgrep
        
    - name: Run Bandit security scan
      run: |
        bandit -r probneural_operator/ -f json -o bandit-report.json || true
        bandit -r probneural_operator/ --severity-level medium
      continue-on-error: true
      
    - name: Run Semgrep scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json probneural_operator/ || true
        semgrep --config=auto probneural_operator/
      continue-on-error: true
      
    - name: Upload static analysis results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: static-analysis-results
        path: |
          bandit-report.json
          semgrep-report.json

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for comprehensive scan
        
    - name: Run TruffleHog secrets scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Run GitLeaks scan
      uses: zricethezav/gitleaks-action@v2
      with:
        config-path: .gitleaks.toml

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker images
      run: |
        docker build --target production -t probneural-operator:latest .
        docker build --target development -t probneural-operator:dev .
        
    - name: Run Trivy vulnerability scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'probneural-operator:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-fs-results.json'
        
    - name: Upload container scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: container-scan-results
        path: |
          trivy-results.sarif
          trivy-fs-results.json

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql.yml
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install SBOM tools
      run: |
        python -m pip install --upgrade pip
        pip install cyclonedx-bom pip-licenses
        
        # Install Syft for container SBOM
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        
    - name: Generate Python SBOM
      run: |
        pip install -e .
        cyclonedx-py -o probneural-operator-python.json
        
    - name: Build and scan container
      run: |
        docker build --target production -t probneural-operator:latest .
        syft packages probneural-operator:latest -o spdx-json > probneural-operator-container.spdx.json
        
    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sbom-files
        path: |
          probneural-operator-python.json
          probneural-operator-container.spdx.json
          
    - name: Attest SBOM
      uses: actions/attest-build-provenance@v1
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        subject-path: |
          probneural-operator-python.json
          probneural-operator-container.spdx.json

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check license compliance
      run: |
        echo "Checking license compliance..."
        # Check for required license file
        [ -f LICENSE ] && echo "‚úÖ LICENSE file present" || echo "‚ùå LICENSE file missing"
        
        # Check for security policy
        [ -f SECURITY.md ] && echo "‚úÖ SECURITY.md present" || echo "‚ùå SECURITY.md missing"
        
        # Check for code of conduct
        [ -f CODE_OF_CONDUCT.md ] && echo "‚úÖ CODE_OF_CONDUCT.md present" || echo "‚ùå CODE_OF_CONDUCT.md missing"
        
    - name: Validate security configuration
      run: |
        echo "Validating security configuration..."
        [ -f .security.yml ] && echo "‚úÖ Security config present" || echo "‚ùå Security config missing"
        [ -f .gitleaks.toml ] && echo "‚úÖ GitLeaks config present" || echo "‚ö†Ô∏è GitLeaks config missing"

  notification:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [dependency-scan, static-analysis, secrets-scan, container-scan, codeql-analysis]
    if: always() && (failure() || contains(needs.*.result, 'failure'))
    
    steps:
    - name: Notify security team
      uses: 8398a7/action-slack@v3
      if: env.SLACK_WEBHOOK_URL != ''
      with:
        status: failure
        channel: '#security-alerts'
        text: |
          üö® Security scan failed for ${{ github.repository }}
          
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Actor: ${{ github.actor }}
          
          Please review the security scan results.
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}