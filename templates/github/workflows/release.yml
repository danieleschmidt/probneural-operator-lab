name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if prerelease
        if [[ $VERSION == *"alpha"* ]] || [[ $VERSION == *"beta"* ]] || [[ $VERSION == *"rc"* ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Validate version format
      run: |
        if ! [[ "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+([a-zA-Z0-9\-\.]+)?$ ]]; then
          echo "Invalid version format: ${{ steps.version.outputs.version }}"
          exit 1
        fi
        
    - name: Check if tag exists (for workflow_dispatch)
      if: github.event_name == 'workflow_dispatch'
      run: |
        if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
          echo "Tag v${{ steps.version.outputs.version }} already exists"
          exit 1
        fi

  test-release:
    name: Test Release Build
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
        
    - name: Run full test suite
      run: |
        pytest tests/ -v --cov=probneural_operator --cov-report=xml
        
    - name: Run security checks
      run: |
        safety check
        bandit -r probneural_operator/
        
    - name: Build package
      run: |
        python -m pip install build
        python -m build
        
    - name: Verify package
      run: |
        python -m pip install twine
        twine check dist/*
        
        # Test installation
        pip install dist/*.whl
        python -c "import probneural_operator; print(f'Version: {probneural_operator.__version__}')"

  build-release:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: [validate-release, test-release]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
        
    - name: Build package
      run: python -m build
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ matrix.os }}
        path: dist/

  docker-release:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [validate-release, test-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          probneural/operator-lab
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          
    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push CUDA image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: cuda
        platforms: linux/amd64
        push: true
        tags: |
          probneural/operator-lab:${{ needs.validate-release.outputs.version }}-cuda
          ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}-cuda
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, docker-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Collect all distribution files
        find . -name "dist-*" -type d | while read dir; do
          cp "$dir"/* release-assets/ 2>/dev/null || true
        done
        
        # Remove duplicates (keep only one copy of each file)
        cd release-assets
        for file in *.tar.gz *.whl; do
          if [ -f "$file" ]; then
            # Keep only the first occurrence
            count=$(ls -1 $file* 2>/dev/null | wc -l)
            if [ $count -gt 1 ]; then
              ls -1 $file* | tail -n +2 | xargs rm -f
            fi
          fi
        done
        
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          echo "## Changes since $LAST_TAG" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "First release of ProbNeural Operator Lab" >> CHANGELOG.md
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create/Update tag (for workflow_dispatch)
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -a "v${{ needs.validate-release.outputs.version }}" -m "Release v${{ needs.validate-release.outputs.version }}"
        git push origin "v${{ needs.validate-release.outputs.version }}"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        name: Release v${{ needs.validate-release.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
        files: release-assets/*
        draft: false
        
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    environment: pypi
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-ubuntu-latest
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create release branch (for major releases)
      if: ${{ !contains(needs.validate-release.outputs.version, 'alpha') && !contains(needs.validate-release.outputs.version, 'beta') && !contains(needs.validate-release.outputs.version, 'rc') }}
      run: |
        MAJOR_MINOR=$(echo "${{ needs.validate-release.outputs.version }}" | sed 's/\.[^.]*$//')
        BRANCH_NAME="release-$MAJOR_MINOR"
        
        git config user.name github-actions
        git config user.email github-actions@github.com
        
        if ! git show-ref --verify --quiet "refs/remotes/origin/$BRANCH_NAME"; then
          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"
          echo "Created release branch: $BRANCH_NAME"
        fi
        
    - name: Update version for development
      run: |
        # This would typically update version numbers for development
        # For now, just log the completion
        echo "Release v${{ needs.validate-release.outputs.version }} completed successfully!"