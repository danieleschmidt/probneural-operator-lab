name: Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.environment.outputs.environment }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Determine environment
      id: environment
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "version=latest" >> $GITHUB_OUTPUT
        fi
        
    - name: Validate deployment
      run: |
        echo "Deploying to: ${{ steps.environment.outputs.environment }}"
        echo "Version: ${{ steps.version.outputs.version }}"
        
        # Check if this is a production deployment
        if [ "${{ steps.environment.outputs.environment }}" = "production" ]; then
          echo "🔥 Production deployment detected"
          if [ "${{ github.event_name }}" != "release" ]; then
            echo "❌ Production deployments must be triggered by releases"
            exit 1
          fi
        fi

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          VERSION=${{ needs.pre-deploy-checks.outputs.version }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deploy-checks.outputs.version }}
        format: spdx-json
        output-file: sbom.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-and-push]
    if: needs.pre-deploy-checks.outputs.environment == 'production'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deploy-checks.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-and-push]
    if: needs.pre-deploy-checks.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.probneural-lab.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment"
        # Replace with actual deployment commands
        # Example: kubectl, docker-compose, terraform, etc.
        
        # Update Kubernetes deployment
        # kubectl set image deployment/probneural-app probneural-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deploy-checks.outputs.version }}
        
        # Or update docker-compose
        # docker-compose -f docker-compose.staging.yml up -d
        
        echo "✅ Staging deployment completed"
        
    - name: Run smoke tests
      run: |
        echo "🧪 Running smoke tests against staging"
        
        # Wait for deployment to be ready
        sleep 30
        
        # Basic health check
        curl -f https://staging.probneural-lab.com/health || exit 1
        
        # Run basic API tests
        python tests/smoke/test_api.py --url https://staging.probneural-lab.com
        
        echo "✅ Smoke tests passed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-and-push, security-scan]
    if: needs.pre-deploy-checks.outputs.environment == 'production' && (success() || github.event.inputs.force_deploy == 'true')
    environment:
      name: production
      url: https://probneural-lab.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Production deployment approval
      uses: trstringer/manual-approval@v1
      if: github.event_name != 'workflow_dispatch' || github.event.inputs.force_deploy != 'true'
      with:
        secret: ${{ github.TOKEN }}
        approvers: danieleschmidt
        minimum-approvals: 1
        issue-title: "Deploying ${{ needs.pre-deploy-checks.outputs.version }} to production"
        issue-body: |
          Please approve the production deployment of version ${{ needs.pre-deploy-checks.outputs.version }}.
          
          **Deployment Details:**
          - Version: ${{ needs.pre-deploy-checks.outputs.version }}
          - Image Digest: ${{ needs.build-and-push.outputs.image-digest }}
          - Triggered by: ${{ github.actor }}
          
          **Pre-deployment Checklist:**
          - [ ] Security scan passed
          - [ ] SBOM generated
          - [ ] All tests passed
          - [ ] Staging deployment successful
          
          **Rollback Plan:**
          If issues occur, rollback can be triggered using the previous stable version.
          
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment"
        
        # Blue-green deployment strategy
        echo "Starting blue-green deployment..."
        
        # Deploy to blue environment
        # kubectl apply -f k8s/production/blue/
        # kubectl set image deployment/probneural-app-blue probneural-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deploy-checks.outputs.version }}
        
        # Wait for blue deployment to be ready
        # kubectl rollout status deployment/probneural-app-blue --timeout=300s
        
        # Run health checks on blue environment
        echo "Running production health checks..."
        
        # Switch traffic to blue (this step varies by infrastructure)
        echo "Switching traffic to new version..."
        
        # Clean up green environment after successful deployment
        echo "Cleaning up previous version..."
        
        echo "✅ Production deployment completed"
        
    - name: Run production smoke tests
      run: |
        echo "🧪 Running production smoke tests"
        
        # Wait for traffic to stabilize
        sleep 60
        
        # Health checks
        curl -f https://probneural-lab.com/health || exit 1
        curl -f https://probneural-lab.com/metrics || exit 1
        
        # Load test with low traffic
        python tests/load/basic_load_test.py --url https://probneural-lab.com --duration 60
        
        echo "✅ Production smoke tests passed"
        
    - name: Update deployment tracking
      run: |
        # Update deployment tracking system
        # This could be internal dashboards, Slack notifications, etc.
        
        echo "📊 Updating deployment tracking"
        
        # Create deployment record
        cat > deployment-record.json << EOF
        {
          "version": "${{ needs.pre-deploy-checks.outputs.version }}",
          "environment": "production",
          "deployed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "deployed_by": "${{ github.actor }}",
          "commit_sha": "${{ github.sha }}",
          "image_digest": "${{ needs.build-and-push.outputs.image-digest }}"
        }
        EOF

  post-deploy:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-and-push, deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Generate deployment report
      run: |
        echo "# Deployment Report" > deployment-report.md
        echo "" >> deployment-report.md
        echo "**Version:** ${{ needs.pre-deploy-checks.outputs.version }}" >> deployment-report.md
        echo "**Environment:** ${{ needs.pre-deploy-checks.outputs.environment }}" >> deployment-report.md
        echo "**Deployed by:** ${{ github.actor }}" >> deployment-report.md
        echo "**Deployment time:** $(date -u)" >> deployment-report.md
        echo "**Status:** ${{ job.status }}" >> deployment-report.md
        
    - name: Notify team
      uses: 8398a7/action-slack@v3
      if: env.SLACK_WEBHOOK_URL != ''
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🚀 Deployment completed for ${{ github.repository }}
          
          **Version:** ${{ needs.pre-deploy-checks.outputs.version }}
          **Environment:** ${{ needs.pre-deploy-checks.outputs.environment }}
          **Status:** ${{ job.status }}
          **Deployed by:** ${{ github.actor }}
          
          ${{ needs.pre-deploy-checks.outputs.environment == 'production' && '🎉 Now live in production!' || '✨ Ready for testing in staging' }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Update monitoring dashboards
      run: |
        echo "📊 Updating monitoring dashboards with deployment info"
        # Add deployment annotations to Grafana
        # Update deployment tracking in monitoring system
        
    - name: Schedule post-deployment monitoring
      run: |
        echo "🔍 Setting up post-deployment monitoring"
        # Schedule extended monitoring period
        # Set up alerts for deployment-related issues